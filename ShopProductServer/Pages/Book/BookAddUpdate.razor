@page "/book/add"
@page "/book/update/{Id:int}"
@using Models;
@using business.Repository.IRepository
@using ShopProductServer.Service.IService
@inject IBookRepository BookRepository
@inject IBookImgRepository BookImgRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUpload

<div class="row mt-2 mb-5">
    <h3 class="card-title text-primary mb-3 ml-3">
        Book @Title
    </h3>
    <div class="col-md-12">
        <EditForm Model="BookModel" OnValidSubmit="HandleBook">
            <DataAnnotationsValidator />
            @*<ValidationSummary />*@
            <div class="form-group">
                <label>Name</label>
                <InputText @bind-Value="BookModel.Name" class="form-control"></InputText>
                <ValidationMessage For="() => BookModel.Name"></ValidationMessage>
            </div>
            <div class="form-group">
                <label>Price</label>
                <InputNumber @bind-Value="BookModel.Price" class="form-control"></InputNumber>
                <ValidationMessage For="() => BookModel.Price"></ValidationMessage>

            </div>
            <div class="form-group">
                <label>Author</label>
                <InputText @bind-Value="BookModel.Author" class="form-control"></InputText>
                <ValidationMessage For="() => BookModel.Author"></ValidationMessage>

            </div>
            <div class="form-group" style="height:250px;">
                <label>Details</label>
                @*<InputTextArea @bind-Value="BookModel.Details" class="form-control"></InputTextArea>*@

                <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Please insert details of the book">
                    <ToolbarContent>
                        <select class="ql-header">
                            <option selected=""></option>
                            <option value="1"></option>
                            <option value="2"></option>
                            <option value="3"></option>
                            <option value="4"></option>
                            <option value="5"></option>
                        </select>
                        <span class="ql-formats">
                            <button class="ql-bold"></button>
                            <button class="ql-italic"></button>
                            <button class="ql-underline"></button>
                            <button class="ql-strike"></button>
                        </span>
                        <span class="ql-formats">
                            <select class="ql-color"></select>
                            <select class="ql-background"></select>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-list" value="ordered"></button>
                            <button class="ql-list" value="bullet"></button>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-link"></button>
                        </span>
                    </ToolbarContent>
                    <EditorContent>
                    </EditorContent>
                </BlazoredTextEditor>
            </div>
            <div class="form-group" style="padding-top:70px;">
                <InputFile OnChange="HandleImgUpload" multiple></InputFile>
                <div class="row">
                    @if (LoadImageProccess)
                {
                        <div class="col-md-12">
                            <span><i class="fade fa-spin fa-spinner"></i>
                                Loading Images...
                            </span>
                        </div>
                }
                    @if (BookModel.UrlImages != null && BookModel.UrlImages.Count > 0)
                    {
                        int counter = 1;
                        @foreach (var bookimage in BookModel.UrlImages)
                        {
                            <div class="col-md-2 mt-3">
                                <div class="book-img" style="background: url('@bookimage') 50% 50%">
                                    <span class="book-img-title">@counter</span>
                                </div>
                                <button type="button" @onclick="() => DeleteImage(bookimage)" class="btn btn-outline-danger btn-block" mt-4>Delete</button>
                            </div>
                            counter++;
                        }
                    }
                </div>
            </div>
            <div class="form-group">
                <button class="btn btn-primary">Book @Title</button>
                <NavLink href="book" class="btn btn-secondary">Back to List</NavLink>
            </div>
        </EditForm>
    </div>
</div>
@code {
    /* Parametro Id para actualizar libro y ponerlo en la URL */
    [Parameter]
    public int? Id { get; set; }
    private BookImgDto BookImg { get; set; } = new BookImgDto();
    private BookDto BookModel { get; set; } = new BookDto();
    private string Title { get; set; } = "Add";
    /* Lista de imagenes que el usuario quiere eliminar */
    private List<string> ImgNamesDelete { get; set; } = new List<string>();

    public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();
    private bool LoadImageProccess { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {
        /* Si es diferente de nulo, tenemos que actualizar */
        if (Id != null)
        {
            /* Cambiar a actualizar */
            Title = "Update";
            /* Busqueda por ID para actualizar y lo ponemos en el objeto ya existente*/
            BookModel = await BookRepository.GetBook(Id.Value);
            /* cargar imagenes para BookModel */
            if (BookModel?.BookImgList != null)
            {
                /* Insertando url de imagenes */
                BookModel.UrlImages = BookModel.BookImgList.Select(x => x.BookImageUrl).ToList();
            }
        }/* En caso contrario tenemos que crear */
        else
        {
            /* Si es nulo o no exista */
            BookModel = new BookDto();
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        /* Si no es la primera renderizacion, vuelve hasta ahi */
        if (!firstRender)
            return;
        /* Sino asignamos un loading */
        bool loading = true;
        /* mientras que loading sea true */
        while (loading)
        {
            try
            {
                /* Notificar que se ejecuta */
                if (!string.IsNullOrEmpty(BookModel.Details))
                {
                    await this.QuillHtml.LoadHTMLContent(BookModel.Details);
                }
                loading = false;
            }
            catch
            {
                /* Tiempo de espera */
                await Task.Delay(10);
                loading = true;

            }
        }

    }

    public async Task HandleBook()
    {
        /* tenemos el metodo BookNameExists que verifica si el nombre es único o no
            esto no funciona en un update o actualizar ya que devolvera el mismo objeto que se está
            actualizando, lo que conllevara a que la condicion piense que hay libros duplicados.
        */
        try
        {
            /* Validar existencia del nombre (unico) */
            var bookNameExists = await BookRepository.BookNameExists(BookModel.Name, BookModel.Id);

            if (bookNameExists != null)
            {
                await JsRuntime.ToastrError("This book already exists");
                return;
            }
            /* Definir si vamos a actualizar o a agregar */
            if (BookModel.Id != 0 && Title == "Update")
            {
                /* Actualizar */
                BookModel.Details = await QuillHtml.GetHTML();

                var resultUpdate = await BookRepository.UpdateBook(BookModel.Id, BookModel);

                if (BookModel.UrlImages != null && BookModel.UrlImages.Any())
                {
                    /* Verificar si hay imagenes a eliminar */
                    if (ImgNamesDelete != null && ImgNamesDelete.Any())
                    {
                        foreach (var imgToDelete in ImgNamesDelete)
                        {
                            /* Obteniendo el nombre de la imagen */
                            var nameImage = imgToDelete.Replace($"BookImages/", "");
                            /* Eliminando el archivo de la carpeta */
                            var result = FileUpload.DeleteFile(nameImage);
                            /* Eliminando la imagen de la bd */
                            await BookImgRepository.DeleteBookImgByUrl(imgToDelete);


                        }
                    }
                    /* Agregamos las imagenes */
                    await AddBookImg(resultUpdate);
                }
                await JsRuntime.ToastrSuccess("Book Update Successfully");
            }
            else
            {
                /*agregar*/

                /* Obtener todo el valor que hay dentro de QuillHtml y asignarlo a la propiedad Detalle de BookModel */
                BookModel.Details = await QuillHtml.GetHTML();

                /* Si no existe, envia el objeto libro al metodo AddBook */
                var addResult = await BookRepository.AddBook(BookModel);
                /* Agregar las imagenes con esto podemos extraer el id de un libro y sus detalles*/
                await AddBookImg(addResult);
                await JsRuntime.ToastrSuccess("Book Created Successfully");
            }
        }
        catch (Exception e)
        {

            throw;
        }

        /* Redireccionando */
        NavigationManager.NavigateTo("book");
    }

    /* establecer valor del editor de texto */


    //public void SetHTML()
    //{
    //    if (!string.IsNullOrEmpty(BookModel.Details))
    //    {
    //        this.QuillHtml.LoadHTMLContent(BookModel.Details);
    //    }
    //    /* Volver a renderizar el componente */
    //    StateHasChanged();
    //}

    private async Task HandleImgUpload(InputFileChangeEventArgs e)
    {
        LoadImageProccess = true;
        try
        {
            /* Instancia de lista de Imagenes */
            var imgList = new List<string>();
            /* Recuperar todas las imagenes o archivos */
            if (e.GetMultipleFiles().Count > 0)
            {
                /* Para cada archivo o imagen*/
                foreach (var img in e.GetMultipleFiles())
                {
                    /* Objeto fileInfo que contreda el objeto de cada archivo */
                    /* Para obtener la ext y asegurarse de que sean imagenes */
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(img.Name);
                    /* Validar las Siguientes Extensiones */
                    if (fileInfo.Extension.ToLower() == ".jpg" || fileInfo.Extension.ToLower() == ".png" || fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        /*si la ruta es correcta, se sube el archivo */
                        /* Devuelve la ruta */
                        var imageUploadedPath = await FileUpload.UploadFile(img);
                        /* Se almacena la ruta a la lista de imagenes */
                        imgList.Add(imageUploadedPath);
                    }
                    else
                    {
                        await JsRuntime.ToastrError("Please select Images with format .jpg|.png|.jpeg");
                        return;

                    }
                }
                /* Verificar si existen imagenes dentro de la lista */
                if (imgList.Any())
                {

                    if (BookModel.UrlImages != null && BookModel.UrlImages.Any())
                    {
                        /* Se agregan las imagenes */
                        BookModel.UrlImages.AddRange(imgList);
                    }
                    else
                    {
                        /* se inicializa una lista nueva*/
                        BookModel.UrlImages = new List<string>();
                        /* Se agregan las Imagenes. */
                        BookModel.UrlImages.AddRange(imgList);

                    }
                }
                else
                {
                    await JsRuntime.ToastrError("Upload Images Failed!");
                    return;
                }
            }
            LoadImageProccess = false;
        }
        catch (Exception ex)
        {

            await JsRuntime.ToastrError(ex.Message);
        }
    }
    private async Task AddBookImg(BookDto bookDetails)
    {
        foreach (var urlImage in BookModel.UrlImages)
        {
            /* Validar si la imagen que se intenta agregar ya existe */
            if (BookModel.BookImgList == null || BookModel.BookImgList.Where(x => x.BookImageUrl == urlImage).Count() == 0)
            {
                /* instancia */
                BookImg = new BookImgDto()
                {
                    BookId = bookDetails.Id,
                    BookImageUrl = urlImage
                };
                /* Agregarlo */
                await BookImgRepository.AddBookImg(BookImg);
            }

        }
    }
    internal async Task DeleteImage(string urlImage)
    {
        try
        {
            /* Obtener indice de la imagen */
            var IndexImage = BookModel.UrlImages.FindIndex(x => x == urlImage);
            /* Nombre exacto de la imagen */
            var nameImage = urlImage.Replace($"{NavigationManager.BaseUri}BookImages/", "");
            /* agregación de un libro */
            if (BookModel.Id == 0 && Title == "Add")
            {
                var result = FileUpload.DeleteFile(nameImage);
            }
            else
            {
                /* Escenario de actualizar */
                /* Si tiene error se instancia de nuevo */
                ImgNamesDelete ??= new List<string>();
                /* Agregamos el nombre de la imagen a eliminar*/
                ImgNamesDelete.Add(urlImage);
            }
            /* Eliminar la imagen pasandole el indice */
            BookModel.UrlImages.RemoveAt(IndexImage);

        }
        catch (Exception e)
        {
            await JsRuntime.ToastrError(e.Message);
        }
    }
}
