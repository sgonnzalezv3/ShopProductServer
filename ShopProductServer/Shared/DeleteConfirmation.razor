<div class="modal fade" data-backdrop="static" data-keyboard="false" id="confirmacionEliminarModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ejemploModalLabel">Confirmar Eliminacion</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => onConfirmationChanged(false)">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                ¿Estas seguro de querer eliminar este elemento?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => onConfirmationChanged(false)">
                    Cancelar
                </button>
                @if (ProccessStart)
                {
                    <button type="button" class="btn btn-danger" @onclick="() => onConfirmationChanged(true)">
                       <i class="fade fa-spin fa-spinner"></i> Procesando...
                    </button>
                }
                else
                {
                    <button type="button" class="btn btn-danger" @onclick="() => onConfirmationChanged(true)">
                        Eliminar
                    </button>
                }

            </div>
        </div>
    </div>
</div>
@code {
    /* Indicar si está en proceso o no */
    public bool ProccessStart { get; set; } = false;
    [Parameter]
    /* EventCallback PERMITE ejeuctar el metodo de otro componente */
    public EventCallback<bool> ChangedConfirmation { get; set; }
    [Parameter]

    public bool IsProccessingFatherComponent { get; set; }
    protected override void OnParametersSet()
    {
        /* Se activa Automaticamiente */
        ProccessStart = IsProccessingFatherComponent;
    }

    /* Metodo que invoca la devolucion de llamada */
    protected async Task onConfirmationChanged(bool value)
    {
        if (value)
        {
            ProccessStart = true;

        }
        /* Pasando el parámetro confirmacion true */
        await ChangedConfirmation.InvokeAsync(value);
    }

}